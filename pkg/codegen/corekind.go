package codegen

import (
	"strings"

	"github.com/grafana/grafana/pkg/kindsys"
	"github.com/grafana/thema"
)

// A KindGenStep generates a single output file from a single
// [kindsys.SomeDecl].
//
// Examples of SingleKindGenerators:
//   - [TSTypesGenerator]: Generate TS types for a single kind
//   - [KindInterfaceGenerator]: Generate [kindsys.Interface] implementation and Thema bindings for a single kind
type KindGenStep interface {
	// Name returns the name of the generator. For use in error output.
	Name() string
	// Generate takes a kindsys.SomeDecl and generates a single file. A nil, nil
	// return indicates the generator has nothing to do for the provided kind.
	Generate(*DeclForGen) (*GeneratedFile, error)
}

// A AggregateKindGenStep generates a single output file from a set of
// [kindsys.SomeDecl].
//
// Examples of MultiKindGenerators:
//   - [BaseCoreRegistryGenerator]: Generate a static registry of [kindsys.Interface] implementations.
//   - [TSSchemaIndexGenerator]: Generate a TypeScript module index that re-exports all generated types.
type AggregateKindGenStep interface {
	// Name returns the name of the generator. For use in error output.
	Name() string
	// Generate takes a set of kindsys.SomeDecl and generates a single file. A nil, nil
	// return indicates the generator has nothing to do for the provided kind.
	Generate([]*DeclForGen) (*GeneratedFile, error)
}

// GeneratedFile represents a single file generated by a KindGenStep
// and AggregateKindGenStep.
type GeneratedFile struct {
	// The path at which the generated file should be placed, relative to
	// the repository root.
	RelativePath string
	// Contents of the generated file.
	Data []byte
}

// TODO docs
// TODO maybe this should take a thema.Runtime and bind opts? not really supposed to be that reusable though
func ForGen(rt *thema.Runtime, decl *kindsys.SomeDecl) (*DeclForGen, error) {
	lin, err := decl.BindKindLineage(rt)
	if err != nil {
		return nil, err
	}

	return &DeclForGen{
		SomeDecl: decl,
		lin:      lin,
	}, nil
}

// DeclForGen wraps [kindsys.SomeDecl] to provide trivial caching of
// the lineage declared by the kind (nil for raw kinds).
type DeclForGen struct {
	*kindsys.SomeDecl
	lin thema.Lineage
}

func (decl *DeclForGen) Lineage() thema.Lineage {
	return decl.lin
}

func (decl *DeclForGen) Name() string {
	return nameFor(decl.Meta)
}

func (decl *DeclForGen) TitleName() string {
	// TODO get this from _actual_ meta once we have it in the kind DSL
	return strings.Title(nameFor(decl.Meta))
}
