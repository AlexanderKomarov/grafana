package codegen

import (
	"github.com/grafana/grafana/pkg/framework/kind"
)

// A SingleKindGenerator generates a single output file from a single
// [kind.Parsed].
//
// Examples of SingleKindGenerators:
//   - [GenTSTypes]: Generate TS types for a single kind
//   - [GenThemaBindings]: Generate Thema bindings in Go for a single kind's lineage
type SingleKindGenerator interface {
	// Name returns the name of the generator. For use in error output.
	Name() string
	// Generate takes a kind.Parsed and generates a single file. A nil, nil
	// return indicates the generator has nothing to do for the provided kind.
	Generate(*kind.Parsed) (*GeneratedFile, error)
}

// A MultiKindGenerator generates a single output file from a set of
// [kind.Parsed].
//
// Examples of MultiKindGenerators:
//   - [GenBaseRegistry]: Generate a static registry of [kind.Interface] implementations.
//   - [GenTSSchemaIndex]: Generate a TypeScript module index that re-exports all generated types.
type MultiKindGenerator interface {
	// Name returns the name of the generator. For use in error output.
	Name() string
	// Generate takes a set of kind.Parsed and generates a single file. A nil, nil
	// return indicates the generator has nothing to do for the provided kind.
	Generate([]*kind.Parsed) (*GeneratedFile, error)
}

// GeneratedFile represents a single file generated by a SingleKindGenerator
// and MultiKindGenerator.
type GeneratedFile struct {
	// The path at which the generated file should be placed, relative to
	// the repository root.
	RelativePath string
	// Contents of the generated file.
	Data []byte
}
