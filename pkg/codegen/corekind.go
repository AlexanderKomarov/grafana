package codegen

import (
	"sync"

	"github.com/grafana/grafana/pkg/cuectx"
	"github.com/grafana/grafana/pkg/framework/kind"
	"github.com/grafana/thema"
)

// A KindGenerator generates a single output file from a single
// [kind.SomeDecl].
//
// Examples of SingleKindGenerators:
//   - [GenTSTypes]: Generate TS types for a single kind
//   - [GenThemaBindings]: Generate Thema bindings in Go for a single kind's lineage
type KindGenerator interface {
	// Name returns the name of the generator. For use in error output.
	Name() string
	// Generate takes a kind.SomeDecl and generates a single file. A nil, nil
	// return indicates the generator has nothing to do for the provided kind.
	Generate(*SomeDeclWithLineage) (*GeneratedFile, error)
}

// A AggregateKindGenerator generates a single output file from a set of
// [kind.SomeDecl].
//
// Examples of MultiKindGenerators:
//   - [GenBaseRegistry]: Generate a static registry of [kind.Interface] implementations.
//   - [GenTSSchemaIndex]: Generate a TypeScript module index that re-exports all generated types.
type AggregateKindGenerator interface {
	// Name returns the name of the generator. For use in error output.
	Name() string
	// Generate takes a set of kind.SomeDecl and generates a single file. A nil, nil
	// return indicates the generator has nothing to do for the provided kind.
	Generate([]*SomeDeclWithLineage) (*GeneratedFile, error)
}

// GeneratedFile represents a single file generated by a KindGenerator
// and AggregateKindGenerator.
type GeneratedFile struct {
	// The path at which the generated file should be placed, relative to
	// the repository root.
	RelativePath string
	// Contents of the generated file.
	Data []byte
}

// TODO docs
// TODO maybe this should take a thema.Runtime and bind opts? not really supposed to be that reusable though
func WithLineage(decl *kind.SomeDecl) *SomeDeclWithLineage {
	return &SomeDeclWithLineage{SomeDecl: decl}
}

// SomeDeclWithLineage wraps [kind.SomeDecl] to provide trivial caching of
// the lineage declared by the kind (for non-raw kinds).
type SomeDeclWithLineage struct {
	*kind.SomeDecl
	do     sync.Once
	linerr error
	lin    thema.Lineage
}

func (decl *SomeDeclWithLineage) Lineage() (thema.Lineage, error) {
	decl.do.Do(func() {
		decl.lin, decl.linerr = decl.SomeDecl.BindKindLineage(cuectx.GrafanaThemaRuntime())
	})
	return decl.lin, decl.linerr
}
