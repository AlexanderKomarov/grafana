// This will be autogenerated, same as pkg/coremodel/dashboard/dashboard_gen.go is today

package dashboard

import (
	"embed"

	"github.com/grafana/grafana/pkg/cuectx"
	"github.com/grafana/grafana/pkg/framework/kind"
	"github.com/grafana/thema"
	"github.com/grafana/thema/vmux"
)

//go:embed kind.cue
var cueFS embed.FS

// rootrel is the relative path from the grafana repository root to the
// directory containing these files. Necessary for error messages to
// point to the right .cue file.
const rootrel string = "pkg/kind/dashboard"

// TODO standard generated docs
type Kind struct {
	lin    thema.ConvergentLineage[*Entity]
	meta   kind.CoreStructuredMeta
	jendec vmux.Endec
	valmux vmux.ValueMux[*Entity]
}

// type guard
var _ kind.Structured = &Kind{}

// TODO standard generated docs
func NewKind(rt *thema.Runtime, opts ...thema.BindOption) (*Kind, error) {
	kfs, err := cuectx.PrefixWithGrafanaCUE(rootrel, cueFS)
	if err != nil {
		return nil, err
	}
	kdef, err := kind.ParseKindFS(kfs, rootrel, rt.Context())
	if err != nil {
		return nil, err
	}
	lin, err := kdef.BindKindLineage(rt, opts...)
	if err != nil {
		return nil, err
	}

	k := &Kind{
		meta: kdef.Meta.(kind.CoreStructuredMeta),
	}

	// Get the thema.Schema that the meta says is in the current version (which
	// codegen ensures is always the latest)
	cursch := thema.SchemaP(lin, k.meta.CurrentVersion)
	tsch, err := thema.BindType[*Entity](cursch, &Entity{})
	if err != nil {
		// Should be unreachable, modulo bugs in the Thema->Go code generator
		return nil, err
	}

	k.jendec = vmux.NewJSONEndec("dashboard.json")
	k.lin = tsch.ConvergentLineage()
	k.valmux = vmux.NewValueMux(k.lin.TypedSchema(), k.jendec)
	return k, nil
}

// TODO standard generated docs
func (k *Kind) Name() string {
	return "dashboard"
}

// TODO standard generated docs
func (k *Kind) Lineage() thema.Lineage {
	return k.lin
}

// TODO standard generated docs
func (k *Kind) ConvergentLineage() thema.ConvergentLineage[*Entity] {
	return k.lin
}

// JSONValueMux is a version multiplexer that maps a []byte containing JSON data
// at any schematized dashboard version to an instance of *Entity.
//
// Validation and translation errors emitted from this func will identify the
// input bytes as "dashboard.json".
//
// This is a thin wrapper around Thema's [vmux.ValueMux].
func (k *Kind) JSONValueMux(b []byte) (*Entity, thema.TranslationLacunas, error) {
	return k.valmux(b)
}

// TODO standard generated docs
func (k *Kind) Maturity() kind.Maturity {
	return k.meta.Maturity
}

// TODO standard generated docs
func (k *Kind) Meta() kind.CoreStructuredMeta {
	return k.meta
}
