// This file is autogenerated. DO NOT EDIT.
//
// Generated by "thema lineage gen" from lineage defined in pkg/plugins/plugindef/plugindef.cue

package plugindef

import (
	"path"

	"github.com/grafana/thema"
	"github.com/grafana/thema/load"
)

// doLineage returns a [thema.ConvergentLineage] for the 'plugindef' lineage.
//
// The lineage is the canonical specification of plugindef. It contains
// all schema versions that have ever existed for plugindef,
// and the lenses that allow valid instances of one schema in the lineage to
// be translated to another schema in the lineage.
//
// This function will return an error if the [Thema invariants] are not met by
// the lineage defined in pkg/plugins/plugindef/plugindef.cue.
//
// As a [thema.ConvergentLineage], the returned lineage has one primary schema,
// 0.0, which is [thema.AssignableTo] the lineage's generic parameterized
// type, [*Plugindef].
//
// [Thema's general invariants]: https://github.com/grafana/thema/blob/main/docs/invariants.md
func doLineage(rt *thema.Runtime, opts ...thema.BindOption) (thema.ConvergentLineage[*Plugindef], error) {
	lin, err := baseLineage(rt, opts...)
	if err != nil {
		return nil, err
	}

	sch := thema.SchemaP(lin, thema.SV(0, 0))
	typ := new(Plugindef)
	tsch, err := thema.BindType(sch, typ)
	if err != nil {
		// This will error out if the 0.0 schema isn't assignable to
		// *Plugindef. If Thema also generates that type, this should be unreachable,
		// barring a critical bug in Thema's Go generator.
		return nil, err
	}
	return tsch.ConvergentLineage(), nil
}

func baseLineage(rt *thema.Runtime, opts ...thema.BindOption) (thema.Lineage, error) {
	// Load a build instance from the embedded fs
	inst, err := load.InstancesWithThema(themaFS, path.Dir("pkg/plugins/plugindef/plugindef.cue"))
	if err != nil {
		// Errors at this point indicate a problem with basic loading of .cue file bytes,
		// which typically means the code generator was misconfigured and a path input
		// is incorrect.
		return nil, err
	}

	raw := rt.Context().BuildInstance(inst)

	// Errors here indicate that:
	//   - The parsed path does not exist in the loaded CUE file (["github.com/grafana/thema/errors".ErrValueNotExist])
	//   - The value at the parsed path exists, but does not appear to be a Thema
	//     lineage (["github.com/grafana/thema/errors".ErrValueNotALineage])
	//   - The value at the parsed path exists and is a lineage (["github.com/grafana/thema/errors".ErrInvalidLineage]),
	//     but is invalid due to the violation of some general Thema invariant -
	//     for example, declared schemas don't follow backwards compatibility rules,
	//     lenses are incomplete.
	return thema.BindLineage(raw, rt)
}

// type guards
var _ thema.ConvergentLineageFactory[*Plugindef] = doLineage
var _ thema.LineageFactory = baseLineage
